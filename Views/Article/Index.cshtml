@model MusicBlogs.ViewModels.ArticleViewModel
@inject MusicBlogs.Services.IUserData _users
@inject MusicBlogs.Services.ILikeData _likes;

@{
    ViewData["Title"] = Model.title;

    bool isModerator = false;

    bool isLiked = false;

    if (User.Identity.IsAuthenticated)
    {
        isModerator = _users.Get(User.Identity.Name).is_moderator;
        isLiked = _likes.Get(User.Identity.Name, Model.id) != null;
    }
}

<!-- Статья -->
<div class="container mb-3">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <!-- Контейнер статьи -->
            <div class="border rounded-3 p-2 ps-4 bg-white">
                <!-- Имя автора, дата публикации и рейтинг -->
                <div class="d-flex small text-muted align-items-center gap-2" id="articleInfo">
                    <a class="page-link" asp-controller="User" asp-route-username="@Model.author">@@@Model.author</a>
                    <span class="fw-light">@Model.published_at.ToString("f")</span>
                    @if (User.Identity.IsAuthenticated)
                    {
                        @if (isLiked)
                        {
                            <button type="button" class="badge btn text-bg-success" id="ratingButton" onclick="dislikeArticle(@Model.id)">
                                Рейтинг: <span id="rating">@Model.rating</span>
                            </button>
                        }
                        else
                        {
                            <button type="button" class="badge btn bg-success bg-opacity-10 text-success" id="ratingButton" onclick="likeArticle(@Model.id)">
                                Рейтинг: <span id="rating">@Model.rating</span>
                            </button>
                        }
                    }
                    else
                    {
                        <span class="badge bg-success bg-opacity-10 text-success">Рейтинг: @Model.rating</span>
                    }
                    @if (isModerator)
                    {
                        <form asp-action="Delete" asp-route-id="@Model.id" method="post">
                            <input type="number" value="@Model.id" name="id" hidden />
                            <button type="submit" class="btn btn-sm btn-outline-danger py-0">Удалить статью</button>
                        </form>
                    }
                </div>

                <!-- Заголовок статьи -->
                <h2 class="mb-3">@Model.title</h2>

                <!-- Содержание статьи -->
                <div class="text-wrap text-break">
                    @Html.Raw(Model.content)
                </div>

                <!-- Теги, если есть -->
                <div class="small text-muted">
                    Теги:
                    @foreach (string tag in Model.tags)
                    {
                        <a asp-controller="Search" asp-action="Q" asp-route-tags="@tag">@tag</a>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Секция комментариев -->
<div class="border-top pt-4">
    <h5 class="mb-2 fw-normal">Комментарии</h5>
    
    @if (Model.comments.Any())
    {
        <div class="mb-2" id="orderElement">
            <span class="text-muted">Сначала</span>
            <span id="commentsOrderLabel">новые</span>
            <button class="btn btn-sm btn-outline-secondary" type="button" onclick="reverseComments()">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down-up" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M11.5 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L11 2.707V14.5a.5.5 0 0 0 .5.5m-7-14a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L4 13.293V1.5a.5.5 0 0 1 .5-.5" />
                </svg>
            </button>
        </div>
    }

    <div id="comments"></div>

    @if (User.Identity.IsAuthenticated)
    {
        <!-- Форма добавления комментария -->
        <h6 class="mb-3 mt-3 fw-normal">Добавить комментарий</h6>
        <form asp-action="AddComment" asp-route-articleId="@Model.id" method="post" id="addCommentForm">
            <div class="d-flex flex-column mb-3 gap-1">
                <textarea class="form-control" rows="3" placeholder="Ваш комментарий..." name="text"></textarea>
            </div>
            <button type="submit" class="btn btn-primary btn-sm">Отправить</button>
        </form>
    }
    else
    {
        <div class="mt-3">Для добавления комментария нужно пройти <a asp-controller="Auth" asp-action="Logreg">аутентификацию</a></div>
    }
</div>

@section Scripts{
    <script type="text/javascript">
        'use strict';

        // Убирает ответ из нового комментария
        function removeAnswerTo() {
            document.getElementById("answerToRoot").remove();
        }

        // Устанавливает ответ новому комментарию
        function setAnswerTo(commentId) {
            if (document.getElementById("answerToRoot") !== null) {
                removeAnswerTo();
            }

            const form = document.getElementById("addCommentForm");

            const root = document.createElement("div");
            root.id = "answerToRoot";
            root.className = "mb-1";

            root.innerHTML = `<input hidden name="answerTo" value=` + commentId + `>
            <span>
            <i class="text-muted small">Ответ на <a href="#comment_` + commentId + `">другой комментарий</a></i>
            <button class="btn btn-sm btn-outline-danger py-0 px-1" onclick="removeAnswerTo()">&times;</button>
            </span>`;

            // новые элементы вставляются в начало формы
            form.insertBefore(root, form.children[0]);
        }

        function likeArticle(id) {
            $('#rating').load('/a/' + id + '/like');
            const btn = document.getElementById("ratingButton");
            btn.onclick = function() { dislikeArticle( @Model.id ); }
            btn.className = "badge btn text-bg-success";
        }

        function dislikeArticle(id) {
            $('#rating').load('/a/' + id + '/dislike');
            const btn = document.getElementById("ratingButton");
            btn.className = "badge btn bg-success bg-opacity-10 text-success";
            btn.onclick = function() { likeArticle( @Model.id ); }
        }

        function reverseComments() {
            _reverseComments(document.getElementById('comments'));

            // Изменение отображаемого порядка
            const commentsOrderLabel = document.getElementById('commentsOrderLabel');
            const orderBefore = commentsOrderLabel.innerText;

            let orderAfter = orderBefore == "новые" ? "старые" : "новые";

            commentsOrderLabel.innerText = orderAfter;
        }

        function _reverseComments(commentsContainer) {
            const comments = Array.from(commentsContainer.children);
            
            // Очищаем контейнер
            commentsContainer.innerHTML = '';
            
            // Добавляем комментарии в обратном порядке
            comments.reverse().forEach(comment => {
                const hasChildComments = comment.getElementsByClassName("answers").length > 0;

                if (hasChildComments) {
                    _reverseComments(comment.getElementsByClassName("answers")[0]);
                }

                commentsContainer.appendChild(comment);
            });
        }

        function renderComments(comments, newestFirst) {
            const commentsRoot = document.getElementById("comments");

            if (comments.length == 0) {
                $("#comments").html("<i>Комментариев нет</i>");
                return;
            }

            for (const e of comments) {
                const id = e["id"];
                const content = e["content"]
                const published_at = e["published_at"];
                const login_Users = e["login_Users"];
                const answer_to = e["answer_to"];

                const published_atStr = new Date(published_at).toLocaleString();

                const comment = document.createElement("div");
                comment.id = "comment_" + id;
                comment.classList.add("comment", "pt-2");

                comment.innerHTML = `<div class="comment-header d-flex small text-muted gap-2">
                    <a class="page-link" href="/u/${login_Users}">@@${login_Users}</a>
                    <span class="fw-light">${published_atStr}</span>
                </div>`;

                const contentDiv = document.createElement("div");
                contentDiv.innerText = content;
                comment.appendChild(contentDiv);

                const commentButtons = document.createElement("div");
                commentButtons.className = "commentButtons";
                commentButtons.innerHTML = `<button class="btn btn-sm btn-outline-secondary py-0 px-2" onclick="setAnswerTo(${id})">Ответить</button>`;

                comment.appendChild(commentButtons);

                if (answer_to === null) {
                    if (newestFirst) {
                        commentsRoot.insertBefore(comment, commentsRoot.children[0]);
                    }

                    else {
                        commentsRoot.appendChild(comment);
                    }
                }

                else {
                    comment.classList.add("ms-4");

                    const parentComment = document.getElementById(`comment_${answer_to}`);

                    var childCommentsDiv = document.getElementById(`answers_${answer_to}`);

                    if (childCommentsDiv === null) {
                        childCommentsDiv = document.createElement("div");
                        childCommentsDiv.id = `answers_${answer_to}`;
                        childCommentsDiv.className = "answers";
                        parentComment.appendChild(childCommentsDiv);
                    }

                    if (newestFirst) {
                        const hasChildComments = parentComment.getElementsByClassName("comment").length != 0;

                        if (hasChildComments) {
                            childCommentsDiv.insertBefore(comment, childCommentsDiv.children[0]);
                        }

                        else {
                            childCommentsDiv.appendChild(comment);
                        }
                    }

                    else {
                        childCommentsDiv.appendChild(comment);
                    }
                }
            }

            // Кнопки удаления
            const is_moderator = @isModerator.ToString().ToLower();

            for (const c of comments) {
                const id = c["id"];

                const htmlComment = document.getElementById("comment_" + id);
                const hasChildComments = htmlComment.getElementsByClassName("comment").length != 0;

                if (!hasChildComments) {
                    if (is_moderator || "@User.Identity?.Name" === c["login_Users"]) {
                        htmlComment.innerHTML += `
                            <form method="post" action="/Article/DeleteComment" id="deleteCommentForm_${id}">
                                <input type="number" name="articleId" hidden value="@Model.id" />
                                <input type="number" name="commentId" hidden value="${id}" />
                            </form>`;

                        const commentButtons = htmlComment.getElementsByClassName("commentButtons")[0];

                        commentButtons.innerHTML += `
                            <button class="btn btn-sm btn-outline-danger py-0 px-2" form="deleteCommentForm_${id}" type="submit">Удалить</button>`;
                    }
                }
            }
        }

        $(document).ready(function () {
            // Загрузка комментариев
            $.ajax({
                url: "/a/@Model.id/comments",
                context: $("#comments"), // $(this) теперь ссылается на элемент div с id comments
                statusCode: {
                    404: function () {
                        $(this).html("<i>Ошибка 404 при загрузке комментариев</i>");
                    }
                },
                success: function (data) {
                    const newestCommentsFirst = true;
                    renderComments(data, newestCommentsFirst);
                },
                error: function (xhr) {
                    $(this).html(`<i>Ошибка ${xhr.status} при загрузке комментариев<br>
                    Описание: ${xhr.statusText}</i>`);
                }
            });            
        });
    </script>
}