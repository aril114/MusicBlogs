@model MusicBlogs.ViewModels.ArticleViewModel

@{
    ViewData["Title"] = Model.title;
}

<!-- Статья -->
<div class="container mb-3">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <!-- Контейнер статьи -->
            <div class="border rounded-3 p-2 ps-4 bg-white">
                <!-- Имя автора, дата публикации и рейтинг -->
                <div class="d-flex small text-muted align-items-center gap-2">
                    <a class="page-link" asp-controller="User" asp-route-username="@Model.author">@@@Model.author</a>
                    <span class="fw-light">@Model.published_at.ToString("f")</span>
                    @if (User.Identity.IsAuthenticated)
                    {
                        <div>
                            <div class="badge bg-success bg-opacity-10 text-success">
                                Рейтинг: <span id="rating">@Model.rating</span>
                            </div>
                            <div class="btn-group btn-group-sm" role="group" aria-label="Кнопки установки рейтинга">
                                <button type="button" onclick="likeArticle(@Model.id)" class="btn btn-outline-primary py-0 px-1">+</button>
                                <button type="button" onclick="dislikeArticle(@Model.id)" class="btn btn-outline-primary py-0 px-1">-</button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <span class="badge bg-success bg-opacity-10 text-success">Рейтинг: @Model.rating</span>
                    }
                </div>

                <!-- Заголовок статьи -->
                <h2 class="mb-3">@Model.title</h2>

                <!-- Содержание статьи -->
                <div class="text-wrap text-break">
                    @Html.Raw(Model.content)
                </div>

                <!-- Теги, если есть -->
                <div class="small text-muted">
                    Теги:
                    @foreach (string tag in Model.tags)
                    {
                        <a asp-controller="Search" asp-action="Q" asp-route-tags="@tag">@tag</a>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Секция комментариев -->
<div class="border-top pt-4">
    <h5 class="mb-4 fw-normal">Комментарии</h5>

    <div id="comments"></div>

    @if (User.Identity.IsAuthenticated)
    {
        <!-- Форма добавления комментария -->
        <h6 class="mb-3 mt-5 fw-normal">Добавить комментарий</h6>
        <form asp-action="AddComment" asp-route-articleId="@Model.id" method="post" id="addCommentForm">
            <div class="d-flex flex-column mb-3 gap-1">
                <textarea class="form-control" rows="3" placeholder="Ваш комментарий..." name="text"></textarea>
            </div>
            <button type="submit" class="btn btn-primary btn-sm">Отправить</button>
        </form>
    }
    else
    {
        <div>Для добавления комментария нужно пройти <a asp-controller="Auth" asp-action="Logreg">аутентификацию</a></div>
    }
</div>

@section Scripts{
    <script type="text/javascript">
        'use strict';

        // Убирает ответ из нового комментария
        function removeAnswerTo() {
            document.getElementById("answerToRoot").remove();
        }

        // Устанавливает ответ новому комментарию
        function setAnswerTo(commentId) {
            if (document.getElementById("answerToRoot") !== null) {
                removeAnswerTo();
            }

            const form = document.getElementById("addCommentForm");

            const root = document.createElement("div");
            root.id = "answerToRoot";
            root.className = "mb-1";

            root.innerHTML = `<input hidden name="answerTo" value=` + commentId + `>
            <span>
            <i class="text-muted small">Ответ на <a href="#comment_` + commentId + `">другой комментарий</a></i>
            <button class="btn btn-sm btn-outline-danger py-0 px-1" onclick="removeAnswerTo()">&times;</button>
            </span>`;

            // новые элементы вставляются в начало формы
            form.insertBefore(root, form.children[0]);
        }

        function likeArticle(id) {
            $('#rating').load('/a/' + id + '/like');
        }

        function dislikeArticle(id) {
            $('#rating').load('/a/' + id + '/dislike');
        }

        $(document).ready(function () {
            $.ajax({
                url: "/a/@Model.id/comments",
                context: $("#comments"), // $(this) теперь ссылается на элемент div с id comments
                statusCode: {
                    404: function () {
                        $(this).html("<i>Ошибка 404 при загрузке комментариев</i>");
                    }
                },
                success: function (data) {
                    const commentsRoot = document.getElementById("comments");

                    if (data.length == 0) {
                        $(this).html("<i>Комментариев нет</i>")
                    }

                    for (const e of data) {
                        const id = e["id"];
                        const content = e["content"]
                        const published_at = e["published_at"];
                        const login_Users = e["login_Users"];
                        const answer_to = e["answer_to"];

                        const published_atStr = new Date(published_at).toLocaleString();

                        const comment = document.createElement("div");
                        comment.id = "comment_" + id;

                        comment.innerHTML = `<div>
                            <span class="fw-semibold">${login_Users}</span>
                            <span class="text-muted small">${published_atStr}</span>
                        </div>
                        <div>${content}</div>
                        <button class="btn btn-sm btn-outline-secondary py-0 px-2" onclick="setAnswerTo(${id})">Ответить</button>`;

                        if (answer_to == 0) {
                            comment.className = "pt-2";
                            commentsRoot.appendChild(comment);
                        }

                        else {
                            comment.className = "ms-4 pt-2";
                            const parentComment = document.getElementById(`comment_${answer_to}`);
                            parentComment.appendChild(comment);
                        }
                    }
                },
                error: function (xhr) {
                    $(this).html(`<i>Ошибка ${xhr.status} при загрузке комментариев<br>
                    Описание: ${xhr.statusText}</i>`);
                }
            });
        });
    </script>
}